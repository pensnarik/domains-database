#!/usr/bin/env python3
# -*- encoding: utf-8 -*-

import os
import sys
import time
import signal
import logging
import socket

import psycopg2
import psycopg2.extras


logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO, format='%(message)s',)


class App(object):
    """ Main application class"""

    update_interval = 10

    def __init__(self):
        signal.signal(signal.SIGTERM, self.terminate)
        self.dsn = os.environ.get('DATATRACE_DB')
        if self.dsn is None:
            print('Please, set $DATATRACE_DB environment variable')
            sys.exit(1)

    def dispatch(self, size=100):
        """Dispatches jobs to session with ID = session_id"""
        logger.info('Dispatching %s jobs', size)
        query = "select public.dispatch(%(count)s)"
        cursor = self.conn.cursor()
        cursor.execute(query, {'count': size})
        result = cursor.fetchone()
        cursor.close()
        logger.info('%s jobs dispatched', result[0])

    def setup(self):
        """Initialization"""
        while True:
            try:
                self.conn = psycopg2.connect(self.dsn)
                break
            except psycopg2.OperationalError as e:
                logger.warning('Database at %s is not available yet, will try to reconnect in 5s',
                               self.dsn)
                logger.warning(str(e))
                time.sleep(5)
                continue
        self.conn.set_isolation_level(psycopg2.extensions.ISOLATION_LEVEL_AUTOCOMMIT)
        cursor = self.conn.cursor()
        cursor.execute("set application_name to 'Queue dispatcher / %s'" % (socket.gethostname()))

    def terminate(self):
        """SIGTERM signal handler"""
        logger.warning("Terminating...")

    def run(self):
        """Application entry point"""
        self.setup()
        while True:
            try:
                self.dispatch(100)
                logger.info('Sleeping')
                time.sleep(self.update_interval)
            except psycopg2.OperationalError as e:
                logger.warning('Database error: %s, sleeping for 10s', str(e))
                time.sleep(10)
                continue


if __name__ == '__main__':
    app = App()
    app.run()
